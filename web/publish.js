var Web3 = require("web3");
var web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:9545"));

var acc = web3.eth.accounts[0]; //get the first account

//Code:
/*
pragma solidity ^0.4.19;
import './Ownable.sol';
import './SafeMath.sol';
import './ProductLib.sol';

contract Marketplace is Ownable {
    using SafeMath for uint;
    using ProductLib for ProductLib.Product;
    
    event LogNewProduct(string name, bytes32 ID);
    event LogPurchase(string productName, uint quantity);
    

    mapping (bytes32 => ProductLib.Product) stock;
    bytes32[] allProductsID;

    function buy(bytes32 ID, uint quantity) public payable {
        require(stock[ID].canBeBought(msg.value, quantity));
        require(stock[ID].productExist());
        stock[ID].buyProduct(quantity);

        LogPurchase(stock[ID].name, quantity);
        
        //increase the price with 20% if stock scarcity
        updatePrice(ID, stock[ID].quantity);
    }
    
    function update(bytes32 ID, uint newQuantity) public onlyOwner {
        require(stock[ID].productExist());
        
        stock[ID].quantity = newQuantity;
        
        //increase or restore the price
        updatePrice(ID, newQuantity);
    }
    
    function updatePrice(bytes32 ID, uint newQuantity) internal {
        if(newQuantity <= 5 && !stock[ID].wasIncreased){
            stock[ID].wasIncreased = true;
            stock[ID].increasePriceOnLowQuantity();
        }
        if(newQuantity > 5 && stock[ID].wasIncreased){
            stock[ID].wasIncreased = false;
            stock[ID].restorePrice();
        }
    }
    
    //creates a new product and returns its ID
    function newProduct(string name, uint price, uint quantity) public onlyOwner returns(bytes32) {
        bytes32 ID = keccak256(name);// the ID is the hash of product name
        require(!stock[ID].productExist());
        allProductsID.push(ID);//add the ID to the array

        stock[ID] = ProductLib.regNewProduct(name, price, quantity, allProductsID.length-1, false);
        
        LogNewProduct(name, ID);
        assert(stock[ID].quantity == quantity);
        return ID;
    }
    
    function removeProduct(bytes32 ID) public onlyOwner {
        require(stock[ID].productExist());
        stock[ID].removeProduct();
        
        //remove the productID from the array
        uint index = stock[ID].IDindex;//take the index of the ID
        delete allProductsID[index];//delete the ID with certain index
        //to fill the gap, take the last value of the array
        //and store it at the index of the deleted ID
        allProductsID[index] = allProductsID[allProductsID.length-1];
        stock[allProductsID[allProductsID.length-1]].IDindex = index;
        allProductsID.length--; //remove the last value and index
    }
    
    function getProduct(bytes32 ID) public view returns(string name, uint price, uint quantity) {
        return (stock[ID].name, stock[ID].price, stock[ID].quantity);
    }
    
    function getProducts() public view returns(bytes32[]) {
        return allProductsID;
    }
    
    function getPrice(bytes32 ID, uint quantity) public view returns (uint) {
        require(stock[ID].quantity >= quantity);
        return stock[ID].price.mul(quantity);
    }
    
    function withdraw() public onlyOwner {
        owner.transfer(this.balance);
    }
    
    function getBalance() public view returns (uint){
        return this.balance;
    }
}
*/

//Store this contract's compiled bytecode and ABI
var abi = [
	{
		"constant": false,
		"inputs": [
			{
				"name": "ID",
				"type": "bytes32"
			},
			{
				"name": "quantity",
				"type": "uint256"
			}
		],
		"name": "buy",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getBalance",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "ID",
				"type": "bytes32"
			}
		],
		"name": "getProduct",
		"outputs": [
			{
				"name": "name",
				"type": "string"
			},
			{
				"name": "price",
				"type": "uint256"
			},
			{
				"name": "quantity",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [],
		"name": "withdraw",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "ID",
				"type": "bytes32"
			}
		],
		"name": "removeProduct",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "ID",
				"type": "bytes32"
			},
			{
				"name": "newQuantity",
				"type": "uint256"
			}
		],
		"name": "update",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getProducts",
		"outputs": [
			{
				"name": "",
				"type": "bytes32[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "ID",
				"type": "bytes32"
			},
			{
				"name": "quantity",
				"type": "uint256"
			}
		],
		"name": "getPrice",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "name",
				"type": "string"
			},
			{
				"name": "price",
				"type": "uint256"
			},
			{
				"name": "quantity",
				"type": "uint256"
			}
		],
		"name": "newProduct",
		"outputs": [
			{
				"name": "",
				"type": "bytes32"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "transferOwnership",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "name",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "ID",
				"type": "bytes32"
			}
		],
		"name": "LogNewProduct",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "productName",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "quantity",
				"type": "uint256"
			}
		],
		"name": "LogPurchase",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "previousOwner",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "OwnershipTransferred",
		"type": "event"
	}
]

var bytecode = "6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061149b806100536000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ddeb632146100b457806312065fe0146100d95780633a20e9df146101025780633ccfd60b146101b05780638da5cb5b146101c5578063a26ea4961461021a578063a58bb84a14610241578063c29b2f2014610271578063c9280f06146102db578063e6f264251461031f578063f2fde38b146103aa575b600080fd5b6100d76004808035600019169060200190919080359060200190919050506103e3565b005b34156100e457600080fd5b6100ec610582565b6040518082815260200191505060405180910390f35b341561010d57600080fd5b6101276004808035600019169060200190919050506105a1565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610173578082015181840152602081019050610158565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34156101bb57600080fd5b6101c36106b1565b005b34156101d057600080fd5b6101d8610786565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561022557600080fd5b61023f6004808035600019169060200190919050506107ab565b005b341561024c57600080fd5b61026f60048080356000191690602001909190803590602001909190505061093c565b005b341561027c57600080fd5b6102846109f6565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102c75780820151818401526020810190506102ac565b505050509050019250505060405180910390f35b34156102e657600080fd5b610309600480803560001916906020019091908035906020019091905050610a58565b6040518082815260200191505060405180910390f35b341561032a57600080fd5b61038c600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091908035906020019091905050610ac0565b60405180826000191660001916815260200191505060405180910390f35b34156103b557600080fd5b6103e1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d50565b005b6104123482600160008660001916600019168152602001908152602001600020610ea59092919063ffffffff16565b151561041d57600080fd5b610440600160008460001916600019168152602001908152602001600020610eda565b151561044b57600080fd5b61047881600160008560001916600019168152602001908152602001600020610f9190919063ffffffff16565b7ffdf9fde64a309b920567412fe6a933942ccfff6922806daebff52e68fe269c906001600084600019166000191681526020019081526020016000206000018260405180806020018381526020018281038252848181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156105475780601f1061051c57610100808354040283529160200191610547565b820191906000526020600020905b81548152906001019060200180831161052a57829003601f168201915b5050935050505060405180910390a161057e8260016000856000191660001916815260200190815260200160002060020154610fb4565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6105a9611245565b6000806001600085600019166000191681526020019081526020016000206000016001600086600019166000191681526020019081526020016000206001015460016000876000191660001916815260200190815260200160002060020154828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561069d5780601f106106725761010080835404028352916020019161069d565b820191906000526020600020905b81548152906001019060200180831161068057829003601f168201915b505050505092509250925092509193909250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561070c57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561078457600080fd5b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561080857600080fd5b61082b600160008460001916600019168152602001908152602001600020610eda565b151561083657600080fd5b6108596001600084600019166000191681526020019081526020016000206110e9565b60016000836000191660001916815260200190815260200160002060030154905060028181548110151561088957fe5b90600052602060002090016000905560026001600280549050038154811015156108af57fe5b9060005260206000209001546002828154811015156108ca57fe5b90600052602060002090018160001916905550806001600060026001600280549050038154811015156108f957fe5b906000526020600020900154600019166000191681526020019081526020016000206003018190555060028054809190600190036109379190611259565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561099757600080fd5b6109ba600160008460001916600019168152602001908152602001600020610eda565b15156109c557600080fd5b80600160008460001916600019168152602001908152602001600020600201819055506109f28282610fb4565b5050565b6109fe611285565b6002805480602002602001604051908101604052809291908181526020018280548015610a4e57602002820191906000526020600020905b81546000191681526020019060010190808311610a36575b5050505050905090565b6000816001600085600019166000191681526020019081526020016000206002015410151515610a8757600080fd5b610ab8826001600086600019166000191681526020019081526020016000206001015461112990919063ffffffff16565b905092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b1e57600080fd5b846040518082805190602001908083835b602083101515610b545780518252602082019150602081019050602083039250610b2f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050610ba6600160008360001916600019168152602001908152602001600020610eda565b151515610bb257600080fd5b60028054806001018281610bc69190611299565b916000526020600020900160008390919091509060001916905550610bf78585856001600280549050036000611164565b6001600083600019166000191681526020019081526020016000206000820151816000019080519060200190610c2e9291906112c5565b5060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050507fb3537ec7ff479a1e147dda5183197ab20ad12fb10af0b0cf0e7a6bccbc47eda9858260405180806020018360001916600019168152602001828103825284818151815260200191508051906020019080838360005b83811015610ce1578082015181840152602081019050610cc6565b50505050905090810190601f168015610d0e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a18260016000836000191660001916815260200190815260200160002060020154141515610d4557fe5b809150509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dab57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610de757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610eba82846111ad90919063ffffffff16565b846001015411158015610ed1575081846002015410155b90509392505050565b6000610ee4611345565b826000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f7c5780601f10610f5157610100808354040283529160200191610f7c565b820191906000526020600020905b815481529060010190602001808311610f5f57829003601f168201915b50505050509050600081511415915050919050565b610fa88183600201546111c890919063ffffffff16565b82600201819055505050565b60058111158015610fee575060016000836000191660001916815260200190815260200160002060040160009054906101000a900460ff16155b1561104d576001806000846000191660001916815260200190815260200160002060040160006101000a81548160ff02191690831515021790555061104c6001600084600019166000191681526020019081526020016000206111e1565b5b600581118015611085575060016000836000191660001916815260200190815260200160002060040160009054906101000a900460ff165b156110e557600060016000846000191660001916815260200190815260200160002060040160006101000a81548160ff0219169083151502179055506110e4600160008460001916600019168152602001908152602001600020611204565b5b5050565b6020604051908101604052806000815250816000019080519060200190611111929190611359565b50600081600101819055506000816002018190555050565b600080600084141561113e576000915061115d565b828402905082848281151561114f57fe5b0414151561115957fe5b8091505b5092915050565b61116c6113d9565b6111746113d9565b60a06040519081016040528088815260200187815260200186815260200185815260200184151581525090508091505095945050505050565b60008082848115156111bb57fe5b0490508091505092915050565b60008282111515156111d657fe5b818303905092915050565b6111f9600a826001015461122790919063ffffffff16565b816001018190555050565b61121c600a82600101546111c890919063ffffffff16565b816001018190555050565b600080828401905083811015151561123b57fe5b8091505092915050565b602060405190810160405280600081525090565b8154818355818115116112805781836000526020600020918201910161127f9190611411565b5b505050565b602060405190810160405280600081525090565b8154818355818115116112c0578183600052602060002091820191016112bf9190611411565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061130657805160ff1916838001178555611334565b82800160010185558215611334579182015b82811115611333578251825591602001919060010190611318565b5b5090506113419190611436565b5090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061139a57805160ff19168380011785556113c8565b828001600101855582156113c8579182015b828111156113c75782518255916020019190600101906113ac565b5b5090506113d59190611436565b5090565b60a0604051908101604052806113ed61145b565b81526020016000815260200160008152602001600081526020016000151581525090565b61143391905b8082111561142f576000816000905550600101611417565b5090565b90565b61145891905b8082111561145457600081600090555060010161143c565b5090565b90565b6020604051908101604052806000815250905600a165627a7a72305820a46bc1fc95807b6ce11d2435df73656aa9e9ccbc0c5f2dc66e93b06152eb63960029"

//create the contract instance. We can use this instance to publish or connect to a published contract
var Contract = web3.eth.contract(abi);

//create a JS Object (key-value pairs), holding the data we need to publish our contract
var publishData = {
	"from": acc, //the account from which it will be published
	"data": bytecode,
	"gas": 4000000 //gas limit. This should be the same or lower than Ethereum's gas limit
}

//publish the contract, passing a callback that will be called twice. Once when the transaction is sent, and once when it is mined
//the first argument is the constructor argument
Contract.new(publishData, function(err, contractInstance) {
	if(!err) {
		if(contractInstance.address) { //if the contract has an address aka if the transaction is mined
			console.log("New contract address is :", contractInstance.address);
		}
	} else {
		console.error(err); //something went wrong
	}
});